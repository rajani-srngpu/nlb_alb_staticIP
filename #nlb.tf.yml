#nlb.tf

resource "aws_eip" "eip_nlb" {
  tags    = {
    Name  = "test-network-lb-eip"
    Env   = "test"
  }
}
resource "aws_lb" "load_balancer" {
  name                              = "static_ip_alb" #can also be obtained from the variable nlb_config
  load_balancer_type                = "network"
  internal                          = false
  subnet_mapping {
    subnet_id     = lookup(var.nlb_config,"subnet")
    allocation_id = aws_eip.eip_nlb.id
  }
  tags = {
    Environment = lookup(var.nlb_config,"environment")
  }
}
resource "aws_lb_listener" "listener" {
  load_balancer_arn       = aws_lb.load_balancer.arn
  for_each = var.forwarding_config
      port                = each.key
      protocol            = each.value
      default_action {
        target_group_arn = "${aws_lb_target_group.tg[each.key].arn}"
        type             = "forward"
      }
}
resource "aws_nlb_target_group" "nlb_tg" {
  for_each = var.forwarding_config
    name                  = "${lookup(var.nlb_config, "environment")}-tg-${lookup(var.tg_config, "name")}-${each.key}"
    port                  = 80
    protocol              = "TCP"
  vpc_id                  = lookup(var.tg_config, "tg_vpc_id")
  target_type             = lookup(var.tg_config, "target_type")

  health_check {
      path                = /index.html
      protocol            = "HTTP"
    }
    tags = {
      Environment = "test"
    }
  }
resource "aws_lb_target_group_attachment" "tga1" {
  for_each = var.forwarding_config
    target_group_arn  = "${aws_nlb_target_group.tg[each.key].arn}"
    port              = 80
  target_id           = lookup(var.tg_config,"target_id1")
}